{"version":3,"sources":["components/blobView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BlobView","props","state","blobsWeFound","containerUrl","sasUri","fullSasUri","nextProps","this","setState","fetchBlobs","uri","URL","host","protocol","container","pathname","sas","search","containerName","split","localBlobList","blobStorageClient","BlobServiceClient","containerClient","getContainerClient","listBlobsFlat","blob","bc","getBlobClient","name","push","url","className","map","x","i","key","properties","contentLength","href","download","React","Component","App","p","s","userUri","handleChange","bind","handleSubmit","event","target","value","preventDefault","Row","Col","Navbar","bg","variant","expand","Container","Brand","Toggle","aria-controls","Collapse","id","Form","onSubmit","Group","controlId","Label","Control","size","type","onChange","placeholder","Text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb821659.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BlobServiceClient, BlobItem } from \"@azure/storage-blob\";\r\n\r\ninterface Props {\r\n    fullSasUri: string;\r\n}\r\ninterface State {\r\n    blobsWeFound: BlobViewItem[];\r\n    containerUrl: string;\r\n    sasUri: string;\r\n}\r\n\r\ninterface BlobViewItem {\r\n    blob: BlobItem;\r\n    url: string;\r\n}\r\n\r\nexport class BlobView extends React.Component<Props, State> {\r\n    state: State;\r\n\r\n    constructor(props: Props, state: State) {\r\n        super(props, state);\r\n        this.state = { blobsWeFound: [], containerUrl: \"\", sasUri: props.fullSasUri }\r\n    }\r\n\r\n    componentWillRecieveProps(nextProps: Props) {\r\n        this.setState({\r\n            sasUri: nextProps.fullSasUri\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //await this.fetchBlobs(this.state.sasUri);\r\n        await this.fetchBlobs(this.state.sasUri);\r\n    }\r\n\r\n    async fetchBlobs(sasUri: string) {\r\n        if (!sasUri && sasUri === \"\") return;\r\n        var uri = new URL(sasUri);\r\n        var host = `${uri.protocol}//${uri.host}`;\r\n        var container = `${uri.pathname}`;\r\n        var sas = uri.search;\r\n\r\n        var containerName = container.split('/')[1];\r\n\r\n        var localBlobList: BlobViewItem[] = [];\r\n        const blobStorageClient = new BlobServiceClient(`${host}${sas}`);\r\n        var containerClient = blobStorageClient.getContainerClient(containerName);\r\n        for await (const blob of containerClient.listBlobsFlat()) {\r\n            var bc = containerClient.getBlobClient(blob.name);\r\n            localBlobList.push({ blob: blob, url: bc.url } as BlobViewItem);\r\n        }\r\n        this.setState({ blobsWeFound: localBlobList, containerUrl: containerClient.url });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>blob name</th>\r\n                            <th>blob size</th>\r\n                            <th>download url</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{\r\n                        this.state.blobsWeFound.map((x, i) => {\r\n                            return <tr key={i}>\r\n                                <td>{x.blob.name}</td>\r\n                                <td>{x.blob.properties.contentLength}</td>\r\n                                <td><a href={x.url} download={x.blob.name}>Download</a></td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Navbar } from 'react-bootstrap';\nimport './App.css';\nimport { BlobView } from './components/blobView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface State {\n  userUri: string;\n}\n\nclass App extends Component<any, State> {\n  constructor(p: any, s: State) {\n    super(p, s);\n    this.state = { userUri: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    this.setState({ userUri: event.target.value });\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row>\n          <Col>\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n              <Container>\n                <Navbar.Brand href=\"#home\">azure blob sas thing</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                </Navbar.Collapse>\n              </Container>\n            </Navbar>\n          </Col>\n        </Row>\n        <Container>\n          <Row>\n            <Col>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formFullSasUri\">\n                  <Form.Label>Enter the SAS of your container here</Form.Label>\n                  <Form.Control size=\"lg\" type=\"url\" value={this.state.userUri} onChange={this.handleChange} placeholder=\"https://<storage>.blob.core.windows.net/<container>/<sas>\" />\n                  <Form.Text className=\"text-muted\">\n                    This is an azure storage sas with list permissions on a container\n                  </Form.Text>\n                </Form.Group>\n              </Form>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <BlobView key={this.state.userUri} fullSasUri={this.state.userUri} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}